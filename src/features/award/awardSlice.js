import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCustomerList, fetchTransactionList } from './awardAPI';

const initialState = {
  customers: [],
  transactions: [],
  fetchCustomersStatus: 'idle',
  fetchTransactionsStatus: 'idle'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchCustomers(''))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCustomers = createAsyncThunk(
  'award/fetchCustomers',
  async (keyword) => {
    const response = await fetchCustomerList(keyword);

    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchTransactions = createAsyncThunk(
  'award/fetchTransactions',
  async (userId) => {
    const response = await fetchTransactionList(userId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const awardSlice = createSlice({
  name: 'award',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCustomers.pending, (state) => {
        state.fetchCustomersStatus = 'loading';
      })
      .addCase(fetchCustomers.fulfilled, (state, action) => {
        state.fetchCustomersStatus = 'idle';
        state.customers = [...action.payload];
      })
      .addCase(fetchTransactions.pending, (state) => {
        state.fetchTransactionsStatus = 'loading';
      })
      .addCase(fetchTransactions.fulfilled, (state, action) => {
        state.fetchTransactionsStatus = 'idle';
        state.transactions = [...action.payload];
      });
  },
});

export const currentCustomers = (state) => state.award.customers;
export const currentTransactions = (state) => state.award.transactions;
export const currentCustomersStatus = (state) => state.award.fetchCustomersStatus;
export const currentTransactionsStatus = (state) => state.award.fetchTransactionsStatus;

export default awardSlice.reducer;
